import numpy as np

def mod_inverse(matrix, mod=26):
    """Computes the modular inverse of a matrix under mod 26."""
    det = int(np.round(np.linalg.det(matrix)))  # Compute determinant
    det_inv = pow(det, -1, mod)  # Compute modular inverse of determinant
    adjugate = np.round(det * np.linalg.inv(matrix)).astype(int) % mod  # Compute adjugate
    return (det_inv * adjugate) % mod  # Multiply by modular inverse of determinant

def text_to_matrix(text, size):
    """Converts text to numerical matrix form."""
    text = text.upper().replace(" ", "")
    text += "X" * (size - len(text) % size) if len(text) % size != 0 else ""
    return [ord(c) - ord('A') for c in text]

def matrix_to_text(matrix):
    """Converts numerical matrix back to text."""
    return "".join(chr(int(num) + ord('A')) for num in matrix)

def hill_encrypt(plaintext, key_matrix):
    """Encrypts plaintext using Hill Cipher."""
    size = len(key_matrix)
    text_matrix = text_to_matrix(plaintext, size)
    text_matrix = np.array(text_matrix).reshape(-1, size)
    encrypted_matrix = (np.dot(text_matrix, key_matrix) % 26).flatten()
    return matrix_to_text(encrypted_matrix)

def hill_decrypt(ciphertext, key_matrix):
    """Decrypts ciphertext using Hill Cipher."""
    size = len(key_matrix)
    inv_key_matrix = mod_inverse(key_matrix)  # Get modular inverse of key matrix
    text_matrix = text_to_matrix(ciphertext, size)
    text_matrix = np.array(text_matrix).reshape(-1, size)
    decrypted_matrix = (np.dot(text_matrix, inv_key_matrix) % 26).flatten()
    return matrix_to_text(decrypted_matrix)

# Example usage
key_matrix = np.array([[6, 24, 1], [13, 16, 10], [20, 17, 15]])  # 3x3 Key Matrix
plaintext = input("Enter plaintext: ").upper()
ciphertext = hill_encrypt(plaintext, key_matrix)
print("Encrypted Text:", ciphertext)

decrypted_text = hill_decrypt(ciphertext, key_matrix)
print("Decrypted Text:", decrypted_text)
